# -*- coding: utf-8 -*-

import discord
from discord.ext import commands
from discord import Webhook, AsyncWebhookAdapter

import sys
import logging
import asyncio
import aiohttp
import random
from typing import Tuple
from core.config import Config

import peony

import requests.packages.urllib3 as urllib3

ReadTimeoutError = urllib3.exceptions.ReadTimeoutError

log = logging.getLogger("tbv.twitter")
default_webhook = {
    "url": "",
    "followed": [],
    "mention_role": ""
}

class Streaming:
    """The description for Twitter goes here."""

    def __init__(self, bot, config=Config):
        self.config = config.get_cog_conf(self, force_registration=True)
        self.bot = bot
        self.client = None
        self._break_loop = False
        self.stream = None

        self.config.register_global(
            auth__consumer_key = None,
            auth__consumer_secret = None,
            auth__access_token = None,
            auth__access_token_secret = None
        )

        self.config.register_guild(
            tweets = {},
            accounts = {},
            phrases = [],
            channels = {}
        )

        loop = asyncio.get_event_loop()
        loop.create_task(self._init_client())
        loop.create_task(self._start_stream())

    @commands.group()
    @commands.guild_only()
    async def stream(self, ctx, *, wh_name: str = "Name"):
        await self._init_client()

        ch_id = str(ctx.channel.id)
        channels = await self.config.guild(ctx.guild).channels()

        if str(ch_id) not in channels:
            channels[ch_id] = default_webhook

        if not channels[ch_id]["url"]:
            wh = await ctx.channel.create_webhook(name=wh_name)
            channels[ch_id]["url"] = wh.url
            await self.config.guild(ctx.guild).channels.set(channels)

        self.stream = await self._start_stream()

    @stream.command(name="follow")
    async def stream_follow(self, ctx, id_):
        await self._stop_stream()
        await self._init_client()

        ch_id = str(ctx.channel.id)
        channels = await self.config.guild(ctx.guild).channels()

        if str(ch_id) not in channels:
            channels[ch_id] = default_webhook

        if not channels[ch_id]["followed"]:
            channels[ch_id]["followed"] = [id_]
            await self.config.guild(ctx.guild).channels.set(channels)
        if id_ not in channels[ch_id]["followed"]:
            channels[ch_id]["followed"].append(id_)
            await self.config.guild(ctx.guild).channels.set(channels)
        else:
            await ctx.send("Already following ID")

        self.stream = await self._start_stream()

    @stream.command(name="unfollow")
    async def stream_unfollow(self, ctx, id_):
        await self._stop_stream()
        await self._init_client()

        ch_id = str(ctx.channel.id)
        channels = await self.config.guild(ctx.guild).channels()

        if str(ch_id) not in channels:
            channels[ch_id] = default_webhook

        if id_ == "all":
            channels[ch_id]["followed"] = []
            await self.config.guild(ctx.guild).channels.set(channels)
        if id_ in channels[ch_id]["followed"]:
            channels[ch_id]["followed"].remove(id_)
            await self.config.guild(ctx.guild).channels.set(channels)

        self.stream = await self._start_stream()

    @stream.command(name="stop")
    async def stop_stream(self, ctx):
        await self._stop_stream()

    @commands.command(name="auth")
    async def auth_twitter(
            self,
            ctx,
            key: str,
            secret: str,
            token: str,
            token_secret: str
    ):
        await self.config.auth.consumer_key.set(key)
        await self.config.auth.consumer_secret.set(secret)
        await self.config.auth.access_token.set(token)
        await self.config.auth.access_token_secret.set(token_secret)

    async def _start_stream(self):
        guilds = await self.config.all_guilds()
        twitter_ids = []
        webhooks = []

        for guild, guild_data in guilds.items():
            for ch, ch_data in guild["channels"]:
                twitter_ids.extend(ch_data.get("followed", []))
                if ch_data.get("url", ""):
                    data = {
                        "url": ch_data["url"],
                        "ids": ch_data["followed"],
                        "role": ch_data["mention_role"]
                    }
                    webhooks.append(data)
        if not twitter_ids:
            return

        ctx = self.client.stream.statuses.filter.post(
            follow=twitter_ids
        )
        async with ctx as stream:
            self.stream = stream
            async for tweet in stream:
                if not peony.events.tweet(tweet):
                    continue
                if 'retweeted_status' in tweet:
                    continue
                embeds = prepare_embed(tweet)
                await self._send_webhooks(tweet, embeds, webhooks)

    async def _init_client(self):
        auth = await self.config.auth()
        self.client = peony.PeonyClient(**auth)

    async def _stop_stream(self):
        if self.stream:
            await self.stream.client.close()

    async def _send_webhooks(data, embeds, webhooks):
        username = data["user"]["screen_name"]
        icon_url = data["user"]["profile_image_url"]
        for webhook in webhooks:
            async with aiohttp.ClientSession() as session:
                wh = Webhook.from_url(
                    webhook["url"],
                    adapter=AsyncWebhookAdapter(session)
                )
                channel = wh.channel
                guild_id = wh.guild.id
                mention_role = None
                phrases = await self.config.guild(wh.guild).phrases()
                content = ""
                if webhook["role"]:
                    permissions = channel.permissions_for(self.bot)
                    if not permissions.manage_roles:
                        continue
                    roles = guild.roles
                    for role in roles:
                        if role.id == webhook["role"]:
                            mention_role = role
                            break
                    await mention_role.edit(mentionable=True)
                    await asyncio.sleep(2)
                    content = random.choice(phrases).format(mention_role.id)
                wh.send(
                    content,
                    username=username,
                    icon_url=icon_url,
                    embeds=embeds
                )
                if webhook["role"]:
                    await asynchio.sleep(2)
                    await mention_role.edit(mentionable=False)
